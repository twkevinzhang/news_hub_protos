syntax = "proto3";
package pb;

service ExtensionApi {
  rpc GetSite (Empty) returns (GetSiteRes) {}
  rpc GetBoards (GetBoardsReq) returns (GetBoardsRes) {}
  rpc GetThreadInfos (GetThreadInfosReq) returns (GetThreadInfosRes) {}
  rpc GetThread (GetThreadReq) returns (GetThreadRes) {}
  rpc GetRegardingPosts (GetRegardingPostsReq) returns (GetRegardingPostsRes) {}
  rpc GetPost (GetPostReq) returns (GetPostRes) {}
  rpc GetComments (GetCommentsReq) returns (GetCommentsRes) {}
}

message PaginationReq {
  // for offset-based pagination
  optional int32 page = 1;
  optional int32 page_size = 3;
  // for cursor-based pagination
  optional int32 limit = 2;
  optional string prev_cursor = 4;
  optional string next_cursor = 5;
}

message PaginationRes {
  // for offset-based pagination
  optional int32 total_page = 1;
  optional int32 current_page = 2;
  optional int32 page_size = 3;
  // for cursor-based pagination
  optional string prev_cursor = 4;
  optional string next_cursor = 5;
}

message Empty {
}

message GetSiteRes {
  Site site = 1;
}

message Site {
  string id = 4;
  string icon = 5;
  string name = 1;
  string description = 2;
  string url = 3;
}

message GetBoardsReq {
  string site_id = 1;
  optional PaginationReq page = 2;
}

message GetBoardsRes {
  repeated Board boards = 1;
  PaginationRes page = 2;
}

message Board {
  string id = 1;
  string site_id = 2;
  string name = 3;
  string icon = 4;
  string large_welcome_image = 5;
  string url = 6;
  repeated string supported_threads_sorting = 7;
}

message GetThreadInfosReq {
  string site_id = 1;
  string board_id = 2;
  optional PaginationReq page = 3;
  optional string sort_by = 4;
  optional string keywords = 5;
}

message GetThreadInfosRes {
  repeated Post thread_infos = 1;
  PaginationRes page = 2;
}

message GetThreadReq {
  string id = 1;
  string site_id = 2;
  string board_id = 3;
}

message GetThreadRes {
  Post thread = 1;
}

message GetRegardingPostsReq {
  string site_id = 1;
  string board_id = 2;
  string thread_id = 3;
  optional PaginationReq page = 4;
}

message GetRegardingPostsRes {
  repeated Post regarding_posts = 1;
  PaginationRes page = 2;
}

message GetPostReq {
  string site_id = 1;
  string board_id = 2;
  string thread_id = 3;
  string id = 4;
}

message GetPostRes {
  Post post = 1;
}

enum ParagraphType {
  PARAGRAPH_TYPE_UNSPECIFIED = 0;
  PARAGRAPH_TYPE_QUOTE = 1;
  PARAGRAPH_TYPE_REPLY_TO = 2;
  PARAGRAPH_TYPE_TEXT = 3;
  PARAGRAPH_TYPE_IMAGE = 4;
  PARAGRAPH_TYPE_LINK = 5;
  PARAGRAPH_TYPE_VIDEO = 6;
}

message Paragraph {
  ParagraphType type = 1;
  oneof content {
    ImageParagraph image = 2;
    VideoParagraph video = 3;
    TextParagraph text = 4;
    QuoteParagraph quote = 5;
    ReplyToParagraph reply_to = 6;
    LinkParagraph link = 7;
  }
}

message ImageParagraph {
  optional string thumb = 1;
  string raw = 2;
}

message VideoParagraph {
  optional string thumb = 1;
  string url = 2;
}

message TextParagraph {
  string content = 1;
}

message QuoteParagraph {
  string content = 1;
}

message ReplyToParagraph {
  string id = 1;
}

message LinkParagraph {
  string content = 1;
}

message Post {
  string id = 1;
  optional string origin_post_id = 10;
  string thread_id = 2;
  string board_id = 3;
  string site_id = 4;
  string author_id = 11;
  string author_name = 5;
  int64 created_at = 7;
  string title = 9;
  int32 liked = 12;
  int32 disliked = 13;
  int32 comments = 14;
  int64 latest_regarding_post_created_at = 15;
  int32 regarding_posts = 16;
  repeated Paragraph contents = 17;
  repeated string tags = 18;
}

message GetCommentsReq {
  string site_id = 1;
  string board_id = 2;
  string thread_id = 3;
  string post_id = 4;
  optional PaginationReq page = 5;
}

message GetCommentsRes {
  repeated Comment comments = 1;
  PaginationRes page = 2;
}

message Comment {
  string id = 1;
  string post_id = 2;
  string thread_id = 3;
  string board_id = 4;
  string site_id = 5;
  string author_id = 6;
  string author_name = 10;
  repeated Paragraph contents = 11;
  int64 created_at = 8;
}
